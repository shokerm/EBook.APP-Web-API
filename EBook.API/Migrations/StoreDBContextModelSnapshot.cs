// <auto-generated />
using System;
using EBook.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EBook.API.Migrations
{
    [DbContext(typeof(StoreDBContext))]
    partial class StoreDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EBook.API.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageAlt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageAlt = "javascript-book",
                            ImageUrl = "../../../../assets//Images/store-images/javascript-book.jpg",
                            Name = "JavaScript",
                            Price = 99.900000000000006
                        },
                        new
                        {
                            Id = 2,
                            ImageAlt = "entity-framework-book",
                            ImageUrl = "../../../../assets//Images/store-images/entity-framework-book.jpg",
                            Name = "Entity Framework",
                            Price = 79.900000000000006
                        },
                        new
                        {
                            Id = 3,
                            ImageAlt = "jQuery",
                            ImageUrl = "../../../../assets//Images/store-images/jquery-book.jpg",
                            Name = "jQuery",
                            Price = 59.899999999999999
                        },
                        new
                        {
                            Id = 4,
                            ImageAlt = "Powershell",
                            ImageUrl = "../../../../assets//Images/store-images/powershell-book.jpg",
                            Name = "Powershell",
                            Price = 49.899999999999999
                        },
                        new
                        {
                            Id = 5,
                            ImageAlt = "ReactJS",
                            ImageUrl = "../../../../assets//Images/store-images/reactjs-book.jpg",
                            Name = "ReactJS",
                            Price = 299.89999999999998
                        },
                        new
                        {
                            Id = 6,
                            ImageAlt = "Git",
                            ImageUrl = "../../../../assets//Images/store-images/git-book.jpg",
                            Name = "Git",
                            Price = 99.900000000000006
                        },
                        new
                        {
                            Id = 7,
                            ImageAlt = "Ruby on Rails",
                            ImageUrl = "../../../../assets//Images/store-images/ruby-on-rails-book.jpg",
                            Name = "Ruby on Rails",
                            Price = 99.900000000000006
                        },
                        new
                        {
                            Id = 8,
                            ImageAlt = "Oracle Database",
                            ImageUrl = "../../../../assets//Images/store-images/oracle-database-book.jpg",
                            Name = "Oracle Database",
                            Price = 99.900000000000006
                        },
                        new
                        {
                            Id = 9,
                            ImageAlt = "image-3",
                            ImageUrl = "../../../../assets//Images/store-images/ios-developer-book.jpg",
                            Name = "IOS Developer ",
                            Price = 149.90000000000001
                        },
                        new
                        {
                            Id = 10,
                            ImageAlt = "Visual Basic .NET",
                            ImageUrl = "../../../../assets//Images/store-images/visual-basic-dotnet-book.jpg",
                            Name = "Visual Basic .NET",
                            Price = 49.899999999999999
                        });
                });

            modelBuilder.Entity("EBook.API.Data.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("EBook.API.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthLevel = 1,
                            Email = "user1@gmail.com",
                            Name = "User 1",
                            Password = "User1234"
                        },
                        new
                        {
                            Id = 2,
                            AuthLevel = 1,
                            Email = "user2@gmail.com",
                            Name = "User 2",
                            Password = "User4321"
                        },
                        new
                        {
                            Id = 3,
                            AuthLevel = 1,
                            Email = "user3@gmail.com",
                            Name = "User 3",
                            Password = "User35678"
                        });
                });

            modelBuilder.Entity("EBook.API.Data.Entities.Sale", b =>
                {
                    b.HasOne("EBook.API.Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBook.API.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
